# Generated by Django 3.0.2 on 2020-05-10 09:05

import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Age',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArchiveLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AutomatedSlide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChannelTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Channel')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExportLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LowMagReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MagBinOverlap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_cycle', models.IntegerField(help_text='Every time the coverslip is removed, the section restained with something, the image cycle increases incrementally')),
                ('date', models.DateField(default=datetime.date.today, help_text='Date that the image was taken')),
                ('notes_1', models.TextField(blank=True, help_text='Notes about the imaging process: what did you image (whole slide, part of tissue, single field), which channels?', max_length=200, null=True)),
                ('notes_2', models.TextField(blank=True, help_text='Notes about the resulting image: out of focus, poor signal in a channel, good, etc.', max_length=200, null=True)),
                ('post_stain', models.TextField(blank=True, help_text='Notes about additional chemical treatments used to improve imaging without changing the targets or fluorophores.', max_length=200, null=True)),
                ('harmony_copy_deleted', models.BooleanField(blank=True, default=False)),
                ('imported_on', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('archive_location', models.ForeignKey(blank=True, help_text='Folder with the resulting image if archived', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.ArchiveLocation')),
                ('channel_target_pairs', models.ManyToManyField(help_text='Which channels are being used in imaging, and what targets do they represent? The channel name selected should exactly match the channels used on the Phenix.', to='experiments.ChannelTarget')),
                ('experiment', models.ForeignKey(blank=True, help_text='Pre-validated list of T283 projects', null=True, on_delete=django.db.models.deletion.CASCADE, to='experiments.Experiment')),
                ('export_location', models.ForeignKey(blank=True, help_text='Folder with the resulting image', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.ExportLocation')),
                ('low_mag_reference', models.ForeignKey(help_text='A low magnification image (e.g. 5X or 10X scan of the whole slide with DAPI only) may be used as a reference for other images, in alignment and/or viewing. For other images, the related image nx§umber should be referenced.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.LowMagReference')),
                ('mag_bin_overlap', models.ForeignKey(help_text='Magnification, binning level, and tile overlap for the image', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.MagBinOverlap')),
            ],
        ),
        migrations.CreateModel(
            name='MeasurementNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Researcher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('login', models.CharField(max_length=6, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('species', models.IntegerField(blank=True, choices=[(1, 'Hca'), (2, 'Mmu')], null=True)),
                ('age', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Age')),
                ('background', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Background')),
                ('genotype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Genotype')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(help_text='Section number on a slide: 1 = top, 2 = second from top… N = bottom)')),
                ('sample', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='SlideBarcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tissue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ZPlanes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('automated_slide_num', models.IntegerField(blank=True, help_text="Number of a slot on a plate, for Phoenix it's from 1 to 4", null=True)),
                ('automated_slide', models.ForeignKey(help_text='A slide ID given to a slot on a given plate', on_delete=django.db.models.deletion.CASCADE, to='experiments.AutomatedSlide')),
                ('measurement', models.ForeignKey(help_text='A measurement_number to which a slot on a given plate corresponds', on_delete=django.db.models.deletion.CASCADE, to='experiments.Measurement')),
                ('sections', models.ManyToManyField(to='experiments.Section')),
            ],
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.ForeignKey(help_text='Barcode ID printed on a physical slide', on_delete=django.db.models.deletion.CASCADE, to='experiments.SlideBarcode')),
            ],
        ),
        migrations.AddField(
            model_name='section',
            name='slide',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiments.Slide'),
        ),
        migrations.AddField(
            model_name='sample',
            name='tissue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Tissue'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='measurement_number',
            field=models.ForeignKey(help_text='Measurement number assigned automatically by the Phenix', on_delete=django.db.models.deletion.CASCADE, to='experiments.MeasurementNumber'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='plate',
            field=models.ForeignKey(blank=True, help_text='A plate name given by automated microscopy system when imaged automatically', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Plate'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='project',
            field=models.ForeignKey(help_text='Pre-validated list of T283 projects', on_delete=django.db.models.deletion.CASCADE, to='experiments.Project'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='researcher',
            field=models.ForeignKey(help_text='Pre-validated list of Phenix users', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Researcher'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='team_directory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.TeamDirectory'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='technology',
            field=models.ForeignKey(help_text='How was the slide stained?', on_delete=django.db.models.deletion.CASCADE, to='experiments.Technology'),
        ),
        migrations.AddField(
            model_name='measurement',
            name='z_planes',
            field=models.ForeignKey(blank=True, help_text='Number of z-planes x depth of each z-plane', null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.ZPlanes'),
        ),
        migrations.AddField(
            model_name='channeltarget',
            name='target',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='experiments.Target'),
        ),
        migrations.AddConstraint(
            model_name='slot',
            constraint=models.UniqueConstraint(fields=('measurement', 'automated_slide_num'), name='unique_slide_num'),
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together={('number', 'slide')},
        ),
        migrations.AddConstraint(
            model_name='measurement',
            constraint=models.UniqueConstraint(fields=('plate', 'measurement_number', 'date'), name='unique_measurement'),
        ),
        migrations.AlterUniqueTogether(
            name='channeltarget',
            unique_together={('channel', 'target')},
        ),
    ]
